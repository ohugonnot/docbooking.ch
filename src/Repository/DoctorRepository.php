<?phpnamespace App\Repository;use App\Entity\Doctor;use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;use Doctrine\Persistence\ManagerRegistry;use Symfony\Component\Security\Core\Exception\UnsupportedUserException;use Symfony\Component\Security\Core\User\PasswordUpgraderInterface;use Symfony\Component\Security\Core\User\UserInterface;/** * @method Doctor|null find($id, $lockMode = null, $lockVersion = null) * @method Doctor|null findOneBy(array $criteria, array $orderBy = null) * @method Doctor[]    findAll() * @method Doctor[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null) */class DoctorRepository extends ServiceEntityRepository implements PasswordUpgraderInterface{    public function __construct(ManagerRegistry $registry)    {        parent::__construct($registry, Doctor::class);    }    /**     * Used to upgrade (rehash) the user's password automatically over time.     */    public function upgradePassword(UserInterface $user, string $newEncodedPassword): void    {        if (!$user instanceof Doctor) {            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', \get_class($user)));        }        $user->setPassword($newEncodedPassword);        $this->_em->persist($user);        $this->_em->flush();    }    public function getEntityManager()    {        return $this->_em;    }    public function findOneBySlugField(string $slug): ?Doctor    {        return $this->createQueryBuilder('d')            ->where('d.slug = :slug')            ->setParameter('slug', $slug)            ->getQuery()            ->getOneOrNullResult();    }    public function findOneByEmailField(string $email): ?Doctor    {        return $this->createQueryBuilder('d')            ->where('d.email = :email')            ->setParameter('email', $email)            ->getQuery()            ->getOneOrNullResult();    }    public function findBySearchField(string $q): array    {        return $this->createQueryBuilder('d')            ->where('d.first_name LIKE :search')            ->orWhere('d.last_name LIKE :search')            ->setParameter('search', "%$q%")            ->orderBy('d.id', 'ASC')            ->setMaxResults(10)            ->getQuery()            ->getArrayResult();    }    public function findByNow(): array    {        $now = new \DateTime();        return $this->createQueryBuilder('d')            ->leftJoin('d.timings', 't')            ->where('t.year > :year')            ->orWhere('t.year = :year AND t.month > :month')            ->orWhere('t.year = :year AND t.month = :month AND t.day >= :day')            ->setParameter('year', $now->format('y'))            ->setParameter('month', $now->format('n'))            ->setParameter('day', $now->format('j'))            ->getQuery()            ->getResult();    }    public function findByLastAppointement(): array    {        return $this->createQueryBuilder('d')            ->leftJoin('d.appointments', 'a')            ->addSelect('a')            ->groupBy('d.id')            ->orderBy('a.create_time', 'DESC')            ->setMaxResults(5)            ->getQuery()            ->getResult();    }}
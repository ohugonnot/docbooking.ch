<?phpnamespace App\Form;use App\Entity\Doctor;use App\Service\Translator;use Symfony\Component\Form\AbstractType;use Symfony\Component\Form\Extension\Core\Type\TextType;use Symfony\Component\Form\Extension\Core\Type\ChoiceType;use Symfony\Component\Form\Extension\Core\Type\DateType;use Symfony\Component\Form\Extension\Core\Type\TextareaType;use Symfony\Component\Form\Extension\Core\Type\FileType;use Symfony\Component\Form\Extension\Core\Type\TelType;use Symfony\Component\Form\Extension\Core\Type\MoneyType;use Symfony\Component\Form\Extension\Core\Type\CollectionType;use Symfony\Bridge\Doctrine\Form\Type\EntityType;use Symfony\Component\Form\FormBuilderInterface;use Symfony\Component\OptionsResolver\OptionsResolver;use Symfony\Component\Validator\Constraints\File;use App\Form\DoctorClinicFormType;use App\Form\DoctorProfileRegistrationFormType;use App\Form\DoctorProfileMembershipsFormType;use App\Form\DoctorProfileExperienceFormType;use App\Form\DoctorProfileEducationFormType;use App\Form\DoctorProfileAwardsFormType;use App\Repository\DoctorRepository;class DoctorProfileSettingsFormType extends AbstractType{    private Translator $translator;    public function __construct(Translator $translator)    {        $this->translator = $translator;    }    public function buildForm(FormBuilderInterface $builder, array $options)    {        $languages_json = file_get_contents('https://www.docbooking.ch/data/languages.json');        $languages = json_decode($languages_json);        $languages_choose = [];        foreach($languages as $lang){            $languages_choose[$lang->name] = $lang->name;        }        $builder            ->add('picture_profile', FileType::class, [                'label' => $this->translator->trans('Brochure (PDF file)'),                'mapped' => false,                'required' => false,                'data_class' => null,                'constraints' => [                    new File([                        'maxSize' => '1024k',                        'mimeTypes' => ['image/jpeg', 'image/png', 'image/gif', 'image/jpg'],                        'mimeTypesMessage' => 'Please upload a valid Image',                    ])                ],            ])            ->add('title', TextType::class, [                'required' => false,                'label' => 'Title',                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('email', TextType::class, [                'label' => 'Email',                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('first_name', TextType::class, [                'label' => 'First Name',                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('last_name', TextType::class, [                'label' => 'Last Name',                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('phone_number', TelType::class, [                'label' => $this->translator->trans('Phone Number'),                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('gender', ChoiceType::class, [                'choices'  => [                    'Select' => null,                    'Male' => 'Male',                    'Female' => 'Female',                ],                'label' => $this->translator->trans('Gender'),                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('date_birth', DateType::class, [                'label' => $this->translator->trans('Date of Birth'),                'row_attr' => ['class' => 'form-group form-focus'],                'attr' => ['class' => 'form-control'],                'format' => 'dd/MM/yyyy',                'widget' => 'single_text',                'html5' => false            ])            ->add('about_me', TextareaType::class, [                'label' => $this->translator->trans('Biography'),                'row_attr' => ['class' => 'form-group mb-0'],                'attr' => ['class' => 'form-control', 'rows' => "5"],                'required'=> false            ])            ->add('speciality', ChoiceType::class, [                'choices'  => [                    'Select' => null,                    $this->translator->trans('General Practitioner') => 'General Practitioner',                    $this->translator->trans('Urologist') => 'Urologist',                    $this->translator->trans('Neurologist') => 'Neurologist',                    $this->translator->trans('Dentist') => 'Dentist',                    $this->translator->trans('Dental Hygienist') => 'Dental Hygienist',                    $this->translator->trans('Orthopedist') => 'Orthopedist',                    $this->translator->trans('Cardiologist') => 'Cardiologist',                    $this->translator->trans('Psychologist') => 'Psychologist',                    $this->translator->trans('Nutritionist-Dietician') => 'Nutritionist-Dietician',                    $this->translator->trans('Alternative/Natural Medicine') => 'Alternative/Natural Medicine',                    $this->translator->trans('Pediatrician') => 'Pediatrician',                    $this->translator->trans('Dermatologist / Aesthetics') => 'Dermatologist / Aesthetics',                    $this->translator->trans('Physiotherapist') => 'Physiotherapist',                    $this->translator->trans('Gynecologist') => 'Gynecologist',                    $this->translator->trans('Ophtalmologist') => 'Ophtalmologist',                    $this->translator->trans('Other') => 'Other'                ],                'label' => $this->translator->trans('Medical Specialty'),                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('services', TextType::class, [                'label' => $this->translator->trans('Services'),                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('specialization', TextType::class, [                'label' => $this->translator->trans('Specialization'),                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('address_line_1', TextType::class, [                'label' => $this->translator->trans('Address Line 1'),                'required' => false,                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('address_line_2', TextType::class, [                'label' => $this->translator->trans('Address Line 2'),                'required' => false,                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('city', TextType::class, [                'label' => $this->translator->trans('City'),                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('state', ChoiceType::class, [                'choices' => array_combine([                    'AR','AI','AG','BL','BS','BE','FR','GE','GL','GR','JU','LU','NE','NW','OB','SG','SH','SZ','SO','TI','TG','UR','VS','VD','ZG','ZH'                ], [                    'AR','AI','AG','BL','BS','BE','FR','GE','GL','GR','JU','LU','NE','NW','OB','SG','SH','SZ','SO','TI','TG','UR','VS','VD','ZG','ZH'                ]),                'label' => $this->translator->trans('State / Province'),                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('country', ChoiceType::class, [                'choices' => [                    $this->translator->trans('Switzerland') => 'CH'                ],                'label' => $this->translator->trans('Country'),                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control'],                'preferred_choices' => ['CH'],            ])            ->add('postal_code', TextType::class, [                'label' => $this->translator->trans('Postal Code'),                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('receiving_patient_info', ChoiceType::class, [                'choices' => [                    $this->translator->trans('Always') => 'always',                    $this->translator->trans('If Patient Wishes') => 'if_patient_wishes',                    $this->translator->trans('Never') => 'never',                ],                'expanded' => true,                'label' => null,                'row_attr' => ['id' => 'medoctor_select']            ])            ->add('price_type', ChoiceType::class, [                'choices' => [                    $this->translator->trans('Price not Shown') => 'price_free',                    $this->translator->trans('Custom Price (per visit)') => 'custom_price',                ],                'expanded' => true,                'multiple' => false,                'label' => null,                'row_attr' => ['id' => 'medoctor_select']            ])            ->add('price_custom_value', MoneyType::class, [                'scale' => 2,                'currency' => null,                'attr' => [                    'min' => '0.00',                    'max' => '1000.00',                    'step' => '0.01',                    'class' => 'form-control',                ],                'row_attr' => ['class' => 'col-md-4'],                'help' => $this->translator->trans('Custom price you can add'),            ])            ->add('spoken_languages', ChoiceType::class, [                'choices' => [                    $this->translator->trans('German') => 'German',                    $this->translator->trans('French') => 'French',                    $this->translator->trans('Italian') => 'Italian',                    $this->translator->trans('English') => 'English',                    $this->translator->trans('Spanish') => 'Spanish',                    $this->translator->trans('Russian') => 'Russian',                    $this->translator->trans('Arabic') => 'Arabic',                    $this->translator->trans('Others') => 'Other'                ],                'expanded' => true,                'multiple' => true,                'label' => null,                'row_attr' => ['id' => 'medoctor_select']            ])            ->add('lang_other', ChoiceType::class, [                'choices'  => $languages_choose,                'label' => false,                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('rcc_number', TextType::class, [                'label' => $this->translator->trans('RCC Number'),                'required' => false,                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('reimbursed_by', TextType::class, [                'label' => $this->translator->trans('Reimbursed by'),                'required' => false,                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('payment_by', TextType::class, [                'label' => $this->translator->trans('Payment by'),                'required' => false,                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('member_of', TextType::class, [                'label' => $this->translator->trans('Member of'),                'required' => false,                'row_attr' => ['class' => 'form-group'],                'attr' => ['class' => 'form-control']            ])            ->add('connectedDoctors', EntityType::class, [                'class' => Doctor::class,                'choice_label' => function ($doctor) {                    return $doctor->getFirstName() . ' ' . $doctor->getLastName();                },                'multiple' => true,                'required' => false,                'attr' => [                    'class' => 'form-control select2-ajax',                    'data-url' => '/autocomplete/doctor',                ],                'label' => 'Connected doctors',            ])            ->add('clinics', CollectionType::class, [                'entry_type' => DoctorClinicFormType::class,                'entry_options' => ['label' => false],                'allow_add' => true,            ])            ->add('registrations', CollectionType::class, [                'entry_type' => DoctorProfileRegistrationFormType::class,                'entry_options' => ['label' => false],                'allow_add' => true,            ])            ->add('memberships', CollectionType::class, [                'entry_type' => DoctorProfileMembershipsFormType::class,                'entry_options' => ['label' => false],                'allow_add' => true,            ])            ->add('experiences', CollectionType::class, [                'entry_type' => DoctorProfileExperienceFormType::class,                'entry_options' => ['label' => false],                'allow_add' => true,            ])            ->add('educations', CollectionType::class, [                'entry_type' => DoctorProfileEducationFormType::class,                'entry_options' => ['label' => false],                'allow_add' => true,            ])            ->add('awards', CollectionType::class, [                'entry_type' => DoctorProfileAwardsFormType::class,                'entry_options' => ['label' => false],                'allow_add' => true,            ]);    }    public function configureOptions(OptionsResolver $resolver)    {        $resolver->setDefaults([            'data_class' => Doctor::class,        ]);    }}